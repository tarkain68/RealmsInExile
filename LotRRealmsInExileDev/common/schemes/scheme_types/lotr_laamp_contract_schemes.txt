@laamp_base_contract_phases_per_agent_charge = 1

##################################################
# INFO
# For laamp contracts that are broadly applicable: that is, they should be able to trigger virtually anywhere and with a minimum of triggers.
# The idea is that any given laamp led by a character skilled in any one thing should always be viable — maybe through crime, maybe by demeaning themselves, but they should always have some contracts around to work with.
##################################################

##################################################
# #Lifestyle Contracts
# mining_prospecting_scheme		Undertake prospecting for a ruler
#
# #Diplo Contracts
#
# #Martial Contracts
#
# #Stewardship Contracts
# lotr_laamp_1011		Assault Enemy Column
#
# #Intrigue Contracts
# lotr_laamp_3011				Murder an enemy commander
#
# #Learning Contracts
# lotr_laamp_4001				Heal character or ruler
#
# #Prowess Contracts
#
##################################################

##################################################
# LIFESTYLE CONTRACT SCHEMES

# Undertake prospecting for a ruler
laamp_mining_prospecting_contract_scheme = {
	# Basic Setup
	skill = stewardship
	desc = laamp_mining_prospecting_contract_scheme_desc_general
	success_desc = laamp_mining_prospecting_contract_scheme_desc_success
	icon = icon_scheme_prospecting
	illustration = "gfx/interface/illustrations/activity_backgrounds/lotr_cave_interior.dds"
	target_type = title
	category = contract
	is_basic = no
	
	# Parameters
	speed_per_skill_point = -1
	base_progress_goal = 120
	base_maximum_success = 50
	phases_per_agent_charge = 1
	# success_chance_growth_per_skill_point = 0.25
	spymaster_speed_per_skill_point = 0
	uses_resistance = no
	
	# Core Triggers
	allow = {
		always = yes
	}

	valid = {
		# valid_laamp_basic_trigger = {
		# 	EMPLOYER = scope:target
		# 	LAAMP = scope:owner
		# }
		always = yes
	}

	odds_prediction = {
		add = 25
	}

	# Agents
	agent_leave_threshold = -25
	agent_join_chance = {
		base = 0
		ai_agent_join_chance_laamp_contract_modifier = yes
	}
	valid_agent = { 
		# is_valid_agent_standard_trigger = yes
	}
	agent_groups_owner_perspective = { courtiers }

	# Base Chances
	base_success_chance = {
		base = 0
		modifier = { # Stewardship Skill
			desc = SCHEME_PROSPECTING_STEWARDSHIP
			add = { 
				value = scheme_owner.stewardship
				divide = 4
				ceiling = yes
				max = 10
			}
		}
		modifier = { # Learning Skill
			desc = SCHEME_PROSPECTING_LEARNING
			add = { 
				value = scheme_owner.learning
				divide = 4
				ceiling = yes
				max = 10
			}
		}
		modifier = { # Mining Trait of Leader
			desc = SCHEME_PROSPECTING_LEADER_MINING_TRAIT
			add = 2
			scheme_owner = { has_trait = lifestyle_miner }
		}
		modifier = { # Mining Trait of Leader - Prospecting Level 1
			desc = SCHEME_PROSPECTING_LEADER_MINING_SKILL
			add = 4
			scheme_owner = { 
				has_trait_xp = { trait = lifestyle_miner track = prospector value >= 50 }
				has_trait_xp = { trait = lifestyle_miner track = prospector value < 100 }
			}
		}
		modifier = { # Mining Trait of Leader - Prospecting Level 2
			desc = SCHEME_PROSPECTING_LEADER_MINING_SKILL
			add = 8
			scheme_owner = { 
				has_trait_xp = { trait = lifestyle_miner track = prospector value = 100 }
			}
		}
		modifier = { # Expedition Leader Lifestyle Perk
			desc = SCHEME_PROSPECTING_EXPEDITION_LEADER
			add = 10
			scheme_owner = { has_perk = expedition_leader_perk }
		}
		modifier = { # Dwarven Dynasty Perk - Sons of Mahal
			desc = SCHEME_PROSPECTING_SONS_OF_MAHAL
			add = 10
			scheme_owner.dynasty = { has_dynasty_perk = lotr_khazad_legacy_4 }
		}
		
		# laamp_contract_scheme_basic_success_chance_modifier = yes
	}
	
	# On Actions
	on_start = {
		# Try to guarantee an event in the first six months.
		# scheme_owner = {
		# 	trigger_event = {
		# 		on_action = laamp_base_0001_contract_scheme_on_going_events
		# 		months = { 1 3 }
		# 	}
		# }
		trigger_event = mining.9000
	}
	on_phase_completed = {
		suppress_scheme_follow_up_event_till_input_given_effect = yes
		laamp_mining_prospecting_contract_scheme_prep_effect = yes
		# cap_schemes_and_fire_reminders_effect = yes
	}
	on_hud_click  = { 
		laamp_mining_prospecting_contract_scheme_prep_effect = yes
	}
	on_semiyearly = {
		# if = {
		# 	limit = {
		# 		scheme_owner = { is_ai = yes }
		# 	}
		# 	laamp_base_0001_contract_scheme_prep_effect = yes
		# }
	}
	on_monthly = { 
		# fire_generic_contract_scheme_on_going_events_effect = yes
	}
	on_invalidated = {
		save_scope_as = scheme
		scheme_owner = {
			send_interface_message = {
				title = scheme_invalidated_title
				type = stewardship_contract_scheme_invalidated_message
				right_icon = scope:scheme.scheme_target_character
				show_as_tooltip = {
					scope:scheme = { end_scheme = yes }
				}
			}
		}
	}
}

# Assault Enemy Column
lotr_laamp_1011_contract_scheme = {
	# Basic Setup
	skill = martial
	desc = lotr_laamp_1011_contract_scheme_desc_general
	success_desc = laamp_base_0000_contract_scheme_desc_success
	icon = martial
	illustration = "gfx/interface/illustrations/event_scenes/military_camp.dds"
	target_type = character
	category = contract
	
	# Parameters
	speed_per_skill_point = t2_spsp_owner_value
	base_progress_goal = t3_base_phase_length_value
	base_maximum_success = t2_base_max_success_value
	phases_per_agent_charge = @laamp_base_contract_phases_per_agent_charge
	success_chance_growth_per_skill_point = laamp_contract_scgpsp_value
	spymaster_speed_per_skill_point = 0
	uses_resistance = no
	
	# Core Triggers
	valid = {
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:target
			LAAMP = scope:owner
		}
	}

	# Agents
	agent_leave_threshold = -25
	agent_join_chance = {
		base = 0
		ai_agent_join_chance_laamp_contract_modifier = yes
	}
	valid_agent = { is_valid_agent_standard_trigger = yes }
	agent_groups_owner_perspective = { courtiers }

	# Base Chances
	base_success_chance = {
		base = 0
		scheme_type_skill_success_chance_modifier = { SKILL = MARTIAL }
		
		laamp_contract_scheme_basic_success_chance_modifier = yes
	}
	
	# On Actions
	on_phase_completed = {
		suppress_scheme_follow_up_event_till_input_given_effect = yes
		lotr_laamp_1011_contract_scheme_prep_effect = yes
		cap_schemes_and_fire_reminders_effect = yes
	}
	on_hud_click  = { lotr_laamp_1011_contract_scheme_prep_effect = yes }
	on_semiyearly = {
		if = {
			limit = {
				scheme_owner = { is_ai = yes }
			}
			lotr_laamp_1011_contract_scheme_prep_effect = yes
		}
	}
	on_monthly = { fire_generic_contract_scheme_on_going_events_effect = yes }
	on_invalidated = {
		save_scope_as = scheme
		scheme_owner = {
			send_interface_message = {
				title = scheme_invalidated_title
				type = diplo_contract_scheme_invalidated_message
				right_icon = scope:scheme.scheme_target_character
				show_as_tooltip = {
					scope:scheme = { end_scheme = yes }
				}
			}
		}
	}
}

##################################################
# INTRIGUE CONTRACT SCHEMES

# Murder an enemy commander
lotr_laamp_3011_contract_scheme = {
	# Basic Setup
	skill = intrigue
	desc = lotr_laamp_3011_contract_scheme_desc_general
	success_desc = lotr_laamp_3011_contract_scheme_desc_success
	discovery_desc = "MURDER_DISCOVERY_DESC"
	icon = intrigue
	illustration = "gfx/interface/illustrations/event_scenes/corridor.dds"
	target_type = character
	is_secret = yes
	maximum_breaches = 5
	category = contract
	
	# Parameters
	speed_per_skill_point = t2_spsp_owner_value
	speed_per_target_skill_point = t2_spsp_target_value
	base_progress_goal = t3_base_phase_length_value
	maximum_secrecy = 95
	base_maximum_success = t2_base_max_success_value
	phases_per_agent_charge = @laamp_base_contract_phases_per_agent_charge
	success_chance_growth_per_skill_point = laamp_contract_scgpsp_value
	spymaster_speed_per_skill_point = t2_spsp_target_spy_value
	
	# Core Triggers
	valid = {
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:target
			LAAMP = scope:owner
		}
	}

	# Agents
	agent_leave_threshold = -25
	agent_join_chance = {
		base = 0
		ai_agent_join_chance_laamp_contract_modifier = yes
	}
	valid_agent = { is_valid_agent_standard_trigger = yes }
	agent_groups_owner_perspective = { courtiers }

	# Base Chances
	base_success_chance = {
		base = 0
		scheme_type_skill_success_chance_modifier = { SKILL = INTRIGUE }
		
		laamp_contract_scheme_basic_success_chance_modifier = yes
	}
	base_secrecy = {
		add = secrecy_base_value
		add = countermeasure_apply_secrecy_maluses_value
	}
	
	# On Actions
	# on_start = {
		# add_scheme_starting_opportunities_intrigue_effect = yes
	# }
	on_phase_completed = {
		suppress_scheme_follow_up_event_till_input_given_effect = yes
		lotr_laamp_3011_contract_scheme_prep_effect = yes
		cap_schemes_and_fire_reminders_effect = yes
	}
	on_hud_click  = { lotr_laamp_3011_contract_scheme_prep_effect = yes }
	on_semiyearly = {
		if = {
			limit = {
				scheme_owner = { is_ai = yes }
			}
			lotr_laamp_3011_contract_scheme_prep_effect = yes
		}
	}
	on_monthly = {
		hostile_scheme_monthly_discovery_chance_effect = yes
		if = {
			limit = {
				NOT = { exists = scope:discovery_event_happening }
			}			
			random_list = {
				100 = {
					scheme_owner = {
						trigger_event = { on_action = murder_ongoing }
					}
				}
				50 = { fire_generic_contract_scheme_on_going_events_effect = yes }
			}
		}
	}
	on_invalidated = {
		save_scope_as = scheme
		scheme_owner = {
			send_interface_message = {
				title = scheme_invalidated_title
				type = diplo_contract_scheme_invalidated_message
				right_icon = scope:scheme.scheme_target_character
				show_as_tooltip = {
					scope:scheme = { end_scheme = yes }
				}
			}
		}
	}
}

##################################################
# LEARNING CONTRACT SCHEMES

# Heal character or ruler
lotr_laamp_4001_contract_scheme = {
	# Basic Setup
	skill = learning
	desc = lotr_laamp_4001_contract_scheme_desc_general
	success_desc = lotr_laamp_4001_contract_scheme_desc_success
	icon = learning
	illustration = "gfx/interface/illustrations/event_scenes/study_physician.dds"
	target_type = character
	category = contract
	
	# Parameters
	speed_per_skill_point = t3_spsp_owner_value
	base_progress_goal = t3_base_phase_length_value
	base_maximum_success = t1_base_max_success_value
	phases_per_agent_charge = @laamp_base_contract_phases_per_agent_charge
	success_chance_growth_per_skill_point = laamp_contract_scgpsp_value
	spymaster_speed_per_skill_point = 0
	uses_resistance = no
	
	# Core Triggers
	valid = {
		valid_laamp_basic_trigger = {
			EMPLOYER = scope:target
			LAAMP = scope:owner
		}
	}

	# Agents
	agent_leave_threshold = -25
	agent_join_chance = {
		base = 0
		ai_agent_join_chance_laamp_contract_modifier = yes
	}
	valid_agent = { 
		is_valid_agent_standard_trigger = yes 
	}
	agent_groups_owner_perspective = { courtiers }

	# Base Chances
	base_success_chance = {
		base = 0
		scheme_type_skill_success_chance_modifier = { SKILL = LEARNING }
		
		laamp_contract_scheme_basic_success_chance_modifier = yes

		laamp_improved_learning_contract_success_modifier = yes
		
		modifier = {
			add = 20
			desc = lotr_laamp_4001_contract.tt.elf_physician
			scope:owner = { is_elf = yes }
		}
		modifier = {
			add = 30
			desc = lotr_laamp_4001_contract.tt.istar_physician
			scope:owner = { is_istari  = yes }
		}
		modifier = {
			add = 5
			desc = lotr_laamp_4001_contract.tt.t0_physician
			scope:owner = { 
				has_trait = lifestyle_physician
				has_trait_xp = {
					trait = lifestyle_physician
					value < 50
				}
			}
		}
		modifier = {
			add = 10
			desc = lotr_laamp_4001_contract.tt.t1_physician
			scope:owner = { 
				has_trait = lifestyle_physician
				has_trait_xp = {
					trait = lifestyle_physician
					value >= 50
					value < 100
				}
			}
		}
		modifier = {
			add = 15
			desc = lotr_laamp_4001_contract.tt.t2_physician
			scope:owner = { 
				has_trait = lifestyle_physician
				has_trait_xp = {
					trait = lifestyle_physician
					value >= 100
				}
			}
		}
		modifier = {
			add = 10
			desc = lotr_laamp_4001_contract.tt.elessar
			scope:owner = { 
				any_character_artifact = {
					has_variable = elessar
				}
			}
		}
		modifier = {
			add = 30
			desc = lotr_laamp_4001_contract.tt.elven_ring
			scope:owner = { 
				any_character_artifact = {
					has_variable = elven_ring
				}
			}
		}
		modifier = {
			add = -200
			desc = lotr_laamp_4001_contract.tt.black_breath
			scope:owner = { 
				NOR = {
					is_elf = yes
					is_istari = yes
					OR = {
						dynasty = dynasty:dynasty_elros
						dynasty = dynasty:dynasty_elendil
						dynasty = dynasty:dynasty_anarion
					}
				}
			}
			scope:task_contract.task_contract_target = { has_trait = black_breath }
		}	
	}
	
	# On Actions
	on_phase_completed = {
		suppress_scheme_follow_up_event_till_input_given_effect = yes
		lotr_laamp_4001_contract_scheme_prep_effect = yes
		cap_schemes_and_fire_reminders_effect = yes
	}
	on_hud_click  = { lotr_laamp_4001_contract_scheme_prep_effect = yes }
	on_semiyearly = {
		if = {
			limit = {
				scheme_owner = { is_ai = yes }
			}
			lotr_laamp_4001_contract_scheme_prep_effect = yes
		}
	}
	on_monthly = { fire_generic_contract_scheme_on_going_events_effect = yes }
	on_invalidated = {
		save_scope_as = scheme
		scheme_owner = {
			send_interface_message = {
				title = scheme_invalidated_title
				type = learning_contract_scheme_invalidated_message
				right_icon = scope:scheme.scheme_target_character
				show_as_tooltip = {
					scope:scheme = { end_scheme = yes }
				}
			}
		}
	}
}